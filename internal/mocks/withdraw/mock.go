// Code generated by MockGen. DO NOT EDIT.
// Source: gofermart/internal/usecase/withdraw (interfaces: RepositoryWithdraw)
//
// Generated by this command:
//
//	mockgen --destination=internal/mocks/withdraw/mock.go --package=withdraw gofermart/internal/usecase/withdraw RepositoryWithdraw
//

// Package withdraw is a generated GoMock package.
package withdraw

import (
	context "context"
	auth "gofermart/internal/model/auth"
	withdraw "gofermart/internal/model/withdraw"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryWithdraw is a mock of RepositoryWithdraw interface.
type MockRepositoryWithdraw struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryWithdrawMockRecorder
}

// MockRepositoryWithdrawMockRecorder is the mock recorder for MockRepositoryWithdraw.
type MockRepositoryWithdrawMockRecorder struct {
	mock *MockRepositoryWithdraw
}

// NewMockRepositoryWithdraw creates a new mock instance.
func NewMockRepositoryWithdraw(ctrl *gomock.Controller) *MockRepositoryWithdraw {
	mock := &MockRepositoryWithdraw{ctrl: ctrl}
	mock.recorder = &MockRepositoryWithdrawMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryWithdraw) EXPECT() *MockRepositoryWithdrawMockRecorder {
	return m.recorder
}

// GetUserWithdrawals mocks base method.
func (m *MockRepositoryWithdraw) GetUserWithdrawals(arg0 context.Context, arg1 auth.UserID) ([]withdraw.GetUserWithdrawModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", arg0, arg1)
	ret0, _ := ret[0].([]withdraw.GetUserWithdrawModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockRepositoryWithdrawMockRecorder) GetUserWithdrawals(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockRepositoryWithdraw)(nil).GetUserWithdrawals), arg0, arg1)
}

// WithdrawFromUserBalance mocks base method.
func (m *MockRepositoryWithdraw) WithdrawFromUserBalance(arg0 context.Context, arg1 withdraw.AddUserWithdrawModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawFromUserBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawFromUserBalance indicates an expected call of WithdrawFromUserBalance.
func (mr *MockRepositoryWithdrawMockRecorder) WithdrawFromUserBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawFromUserBalance", reflect.TypeOf((*MockRepositoryWithdraw)(nil).WithdrawFromUserBalance), arg0, arg1)
}
