// Code generated by MockGen. DO NOT EDIT.
// Source: gofermart/internal/usecase/auth (interfaces: AuthRepository)
//
// Generated by this command:
//
//	mockgen --destination=internal/mocks/auth/mock.go --package=auth gofermart/internal/usecase/auth AuthRepository
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	auth "gofermart/internal/model/auth"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockAuthRepository) AddUser(arg0 context.Context, arg1, arg2 string) (auth.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(auth.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockAuthRepositoryMockRecorder) AddUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockAuthRepository)(nil).AddUser), arg0, arg1, arg2)
}

// GetUserByLoginAndPassword mocks base method.
func (m *MockAuthRepository) GetUserByLoginAndPassword(arg0 context.Context, arg1, arg2 string) (*auth.GetUserByLoginAndPasswordModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLoginAndPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(*auth.GetUserByLoginAndPasswordModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLoginAndPassword indicates an expected call of GetUserByLoginAndPassword.
func (mr *MockAuthRepositoryMockRecorder) GetUserByLoginAndPassword(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLoginAndPassword", reflect.TypeOf((*MockAuthRepository)(nil).GetUserByLoginAndPassword), arg0, arg1, arg2)
}
