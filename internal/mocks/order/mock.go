// Code generated by MockGen. DO NOT EDIT.
// Source: gofermart/internal/usecase/order (interfaces: OrderRepository)
//
// Generated by this command:
//
//	mockgen --destination=internal/mocks/order/mock.go --package=order gofermart/internal/usecase/order OrderRepository
//

// Package order is a generated GoMock package.
package order

import (
	context "context"
	auth "gofermart/internal/model/auth"
	order "gofermart/internal/model/order"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderRepository) AddOrder(arg0 context.Context, arg1 *order.AddOrderModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderRepositoryMockRecorder) AddOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderRepository)(nil).AddOrder), arg0, arg1)
}

// GetUserOrders mocks base method.
func (m *MockOrderRepository) GetUserOrders(arg0 context.Context, arg1 auth.UserID) ([]order.GetUserOrderModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", arg0, arg1)
	ret0, _ := ret[0].([]order.GetUserOrderModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockOrderRepositoryMockRecorder) GetUserOrders(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetUserOrders), arg0, arg1)
}
