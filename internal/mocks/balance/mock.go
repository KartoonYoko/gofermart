// Code generated by MockGen. DO NOT EDIT.
// Source: gofermart/internal/usecase/balance (interfaces: RepositoryBalance)
//
// Generated by this command:
//
//	mockgen --destination=internal/mocks/balance/mock.go --package=balance gofermart/internal/usecase/balance RepositoryBalance
//

// Package balance is a generated GoMock package.
package balance

import (
	context "context"
	auth "gofermart/internal/model/auth"
	balance "gofermart/internal/model/balance"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryBalance is a mock of RepositoryBalance interface.
type MockRepositoryBalance struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryBalanceMockRecorder
}

// MockRepositoryBalanceMockRecorder is the mock recorder for MockRepositoryBalance.
type MockRepositoryBalanceMockRecorder struct {
	mock *MockRepositoryBalance
}

// NewMockRepositoryBalance creates a new mock instance.
func NewMockRepositoryBalance(ctrl *gomock.Controller) *MockRepositoryBalance {
	mock := &MockRepositoryBalance{ctrl: ctrl}
	mock.recorder = &MockRepositoryBalanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryBalance) EXPECT() *MockRepositoryBalanceMockRecorder {
	return m.recorder
}

// GetUserBalance mocks base method.
func (m *MockRepositoryBalance) GetUserBalance(arg0 context.Context, arg1 auth.UserID) (*balance.GetUserBalanceModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", arg0, arg1)
	ret0, _ := ret[0].(*balance.GetUserBalanceModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockRepositoryBalanceMockRecorder) GetUserBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockRepositoryBalance)(nil).GetUserBalance), arg0, arg1)
}
